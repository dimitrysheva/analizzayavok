import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from io import StringIO

st.set_page_config(layout="wide", page_title="–ê–Ω–∞–ª—ñ–∑ –∑–∞—è–≤–æ–∫ –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é", page_icon="‚öôÔ∏è")

st.title("‚öôÔ∏è –ê–Ω–∞–ª—ñ–∑ –∑–∞—è–≤–æ–∫ –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é")

st.markdown("""
    –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à **CSV-—Ñ–∞–π–ª** –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –∑–∞—è–≤–∫–∏.
    
    **–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:**
    * **–ü–æ—à—É–∫**: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø–æ–ª–µ –ø–æ—à—É–∫—É, —â–æ–± —à–≤–∏–¥–∫–æ –∑–Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫–∏ –∑–∞ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º –∞–±–æ –æ–ø–∏—Å–æ–º —Ä–æ–±—ñ—Ç.
    * **–Ñ–¥–∏–Ω–∞ —Ç–∞–±–ª–∏—Ü—è**: –í–∏ –±–∞—á–∏—Ç–µ –≤—Å—ñ –≤—ñ–∑—É–∞–ª—å–Ω—ñ –ø–æ–∑–Ω–∞—á–∫–∏ (–ø—Ä–æ–±–ª–µ–º–Ω–∏–π —á–∞—Å, –∞–Ω–æ–º–∞–ª—ñ—ó) –≤ –æ–¥–Ω—ñ–π —Ç–∞–±–ª–∏—Ü—ñ, –¥–µ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ.
    * **–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω**: –¢–µ–ø–µ—Ä —î –¥–≤—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:
        1. **–û–Ω–æ–≤–ª–µ–Ω–∏–π CSV**: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–æ–≤–Ω—É —Ç–∞–±–ª–∏—Ü—é –∑ —É—Å—ñ–º–∞ –≤–∞—à–∏–º–∏ –∑–º—ñ–Ω–∞–º–∏.
        2. **–ó–≤—ñ—Ç –ø–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è—Ö**: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ–∞–π–ª –ª–∏—à–µ –∑ —Ç–∏–º–∏ –∑–∞—è–≤–∫–∞–º–∏, –¥–æ —è–∫–∏—Ö –≤–∏ –¥–æ–¥–∞–ª–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ.
    
    **–û—á—ñ–∫—É–≤–∞–Ω—ñ —Å—Ç–æ–≤–ø—Ü—ñ**:
    * "–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è" —Ç–∞ "–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è" (–æ–±–æ–≤'—è–∑–∫–æ–≤—ñ)
    * "–î–∞—Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è" —Ç–∞ "–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è" (—è–∫—â–æ —î)
    * –ê —Ç–∞–∫–æ–∂: "–¢–∏–ø –∑–∞—è–≤–∫–∏", "–¶–µ—Ö", "–õ—ñ–Ω—ñ—è", "–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è", "–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä", "–û–ø–∏—Å —Ä–æ–±—ñ—Ç", "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏".
""")

# --- –í–∏–±—ñ—Ä –¥–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö (—Ç—ñ–ª—å–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ –∫–æ–º–ø'—é—Ç–µ—Ä–∞) ---
st.sidebar.header("–î–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö")
df = None
uploaded_file = st.file_uploader("üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV-—Ñ–∞–π–ª", type=["csv"])

if uploaded_file:
    try:
        uploaded_file.seek(0)
        try:
            df = pd.read_csv(uploaded_file, sep=';', encoding='utf-8')
        except Exception:
            uploaded_file.seek(0)
            df = pd.read_csv(uploaded_file, sep=';', encoding='cp1251')
        
        if df.empty or len(df.columns) <= 2:
            uploaded_file.seek(0)
            try:
                df = pd.read_csv(uploaded_file, sep=',', encoding='utf-8')
            except Exception:
                uploaded_file.seek(0)
                df = pd.read_csv(uploaded_file, sep=',', encoding='cp1251')
        
        if df.empty or len(df.columns) <= 2:
            uploaded_file.seek(0)
            try:
                df = pd.read_csv(uploaded_file, encoding='utf-8-sig')
            except Exception:
                uploaded_file.seek(0)
                df = pd.read_csv(uploaded_file, encoding='cp1251')

        st.success("‚úÖ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
    except Exception as e:
        st.error(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
        st.info("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —Ñ–∞–π–ª –Ω–µ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π —Ç–∞ —á–∏ —î —É –Ω—å–æ–º—É –¥–∞–Ω—ñ.")
        df = None

# --- –í—Å—è –ø–æ–¥–∞–ª—å—à–∞ –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö —Ç–µ–ø–µ—Ä –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ df –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π ---
if df is not None and not df.empty:
    try:
        critical_date_time_cols = ["–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è", "–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è"]
        for col in critical_date_time_cols:
            if col not in df.columns:
                st.error(f"‚ùå –£ —Ñ–∞–π–ª—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å: '{col}'. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à —Ñ–∞–π–ª.")
                st.stop()

        if "–ó–≤—ñ—Ç –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω—É —Ä–æ–±–æ—Ç—É" not in df.columns:
            df["–ó–≤—ñ—Ç –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω—É —Ä–æ–±–æ—Ç—É"] = ""
            st.info("‚ÑπÔ∏è –°—Ç–æ–≤–ø–µ—Ü—å '–ó–≤—ñ—Ç –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω—É —Ä–æ–±–æ—Ç—É' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É —Ñ–∞–π–ª—ñ —ñ –±—É–≤ –¥–æ–¥–∞–Ω–∏–π —è–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        if "–†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–∞—è–≤–∫–∏" not in df.columns:
            df["–†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–∞—è–≤–∫–∏"] = ""
            st.info("‚ÑπÔ∏è –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å '–†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–∞—è–≤–∫–∏' –¥–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤.")
        if "–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä" not in df.columns:
            df["–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä"] = df.index + 1
            st.info("‚ÑπÔ∏è –°—Ç–æ–≤–ø–µ—Ü—å '–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É —Ñ–∞–π–ª—ñ —ñ –±—É–≤ –¥–æ–¥–∞–Ω–∏–π.")
        if "–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è" not in df.columns:
            df["–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è"] = "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
            st.info("‚ÑπÔ∏è –°—Ç–æ–≤–ø–µ—Ü—å '–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É —Ñ–∞–π–ª—ñ —ñ –±—É–≤ –¥–æ–¥–∞–Ω–∏–π –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'.")
        if "–û–ø–∏—Å —Ä–æ–±—ñ—Ç" not in df.columns:
            df["–û–ø–∏—Å —Ä–æ–±—ñ—Ç"] = "–ë–µ–∑ –æ–ø–∏—Å—É"
            st.info("‚ÑπÔ∏è –°—Ç–æ–≤–ø–µ—Ü—å '–û–ø–∏—Å —Ä–æ–±—ñ—Ç' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É —Ñ–∞–π–ª—ñ —ñ –±—É–≤ –¥–æ–¥–∞–Ω–∏–π –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º '–ë–µ–∑ –æ–ø–∏—Å—É'.")
        if "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏" not in df.columns:
            df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"] = "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
            st.info("‚ÑπÔ∏è –°—Ç–æ–≤–ø–µ—Ü—å '–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É —Ñ–∞–π–ª—ñ —ñ –±—É–≤ –¥–æ–¥–∞–Ω–∏–π –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'.")
        
        date_formats = ["%Y-%m-%d", "%d.%m.%Y", "%m/%d/%Y", "%d/%m/%Y", "%Y/%m/%d"]
        time_formats = ["%H:%M:%S", "%H:%M"]
        combined_datetime_formats = [f"{d_fmt} {t_fmt}" for d_fmt in date_formats for t_fmt in time_formats]
        combined_datetime_formats = [
            "%Y-%m-%d %H:%M:%S", "%Y-%m-%d %H:%M", "%d.%m.%Y %H:%M:%S",
            "%d.%m.%Y %H:%M", "%m/%d/%Y %H:%M:%S", "%m/%d/%Y %H:%M",
            "%Y-%m-%dT%H:%M:%S"
        ] + combined_datetime_formats
        combined_datetime_formats.extend(date_formats)
        combined_datetime_formats = list(dict.fromkeys(combined_datetime_formats))

        def combine_and_convert_datetime(row, date_col_name, time_col_name=None):
            date_val = row.get(date_col_name)
            time_val = row.get(time_col_name) if time_col_name else None
            if pd.isna(date_val) and (time_col_name is None or pd.isna(time_val)):
                return np.nan
            try:
                if pd.api.types.is_numeric_dtype(type(date_val)) and pd.notna(date_val):
                    base_date = pd.to_datetime('1899-12-30')
                    converted_date = base_date + pd.to_timedelta(date_val, unit='D')
                    if pd.notna(converted_date):
                        if time_col_name and pd.api.types.is_numeric_dtype(type(time_val)) and pd.notna(time_val):
                            converted_time = pd.to_timedelta(time_val, unit='D')
                            return converted_date + converted_time
                        return converted_date
            except Exception:
                pass
            date_str = str(date_val).strip() if pd.notna(date_val) else ""
            time_str = str(time_val).strip() if pd.notna(time_val) else ""
            combined_str = f"{date_str} {time_str}" if date_str and time_str else date_str or time_str
            if not combined_str:
                return np.nan
            for fmt in combined_datetime_formats:
                try:
                    return pd.to_datetime(combined_str, format=fmt)
                except (ValueError, TypeError):
                    continue
            try:
                return pd.to_datetime(combined_str, infer_datetime_format=True, errors='coerce')
            except (ValueError, TypeError):
                return np.nan

        df['–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (datetime)'] = df.apply(lambda row: combine_and_convert_datetime(row, '–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è', '–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'), axis=1)
        initial_rows = len(df)
        df.dropna(subset=["–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (datetime)"], inplace=True)
        if len(df) < initial_rows:
            st.warning(f"‚ö†Ô∏è –í–∏–¥–∞–ª–µ–Ω–æ {initial_rows - len(df)} —Ä—è–¥–∫—ñ–≤ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π '–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'.")
        if df.empty:
            st.warning("‚ö†Ô∏è –ü—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ –¥–∞—Ç —É —Ñ–∞–π–ª—ñ –Ω–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—è –¥—ñ–π—Å–Ω–∏—Ö –¥–∞–Ω–∏—Ö.")
            st.stop()
        
        df_for_anomaly_detection = df.drop_duplicates(subset=['–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä']).copy()
        
        if "–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è" in df_for_anomaly_detection.columns and "–û–ø–∏—Å —Ä–æ–±—ñ—Ç" in df_for_anomaly_detection.columns and "–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (datetime)" in df_for_anomaly_detection.columns:
            df_for_anomaly_detection['problem_location'] = df_for_anomaly_detection['–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è'].fillna(df_for_anomaly_detection['–õ—ñ–Ω—ñ—è'].fillna('–ù–µ–≤—ñ–¥–æ–º–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è')).astype(str)
            df_for_anomaly_detection['problem_description'] = df_for_anomaly_detection['–û–ø–∏—Å —Ä–æ–±—ñ—Ç'].fillna('–ë–µ–∑ –æ–ø–∏—Å—É —Ä–æ–±—ñ—Ç').astype(str)
            df_for_anomaly_detection['problem_key'] = df_for_anomaly_detection['problem_location'] + " ### " + df_for_anomaly_detection['problem_description']
            df_for_anomaly_detection = df_for_anomaly_detection.sort_values(by=['problem_key', '–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (datetime)'])
            df_for_anomaly_detection['time_diff'] = df_for_anomaly_detection.groupby('problem_key')['–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (datetime)'].diff()
            anomaly_min_delta = pd.Timedelta(days=0, minutes=1)
            anomaly_max_delta = pd.Timedelta(days=3)
            df_for_anomaly_detection['–ü—ñ–¥–æ–∑—Ä—ñ–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è'] = (
                (df_for_anomaly_detection['time_diff'] > anomaly_min_delta) & 
                (df_for_anomaly_detection['time_diff'] <= anomaly_max_delta)
            )
            anomaly_flags = df_for_anomaly_detection[['–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä', '–ü—ñ–¥–æ–∑—Ä—ñ–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è']].copy()
            anomaly_flags = anomaly_flags.drop_duplicates(subset='–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä', keep='first')
            df = df.merge(anomaly_flags, on='–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä', how='left')
            df['–ü—ñ–¥–æ–∑—Ä—ñ–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è'] = df['–ü—ñ–¥–æ–∑—Ä—ñ–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è'].fillna(False)
        else:
            st.warning("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑ –∞–Ω–æ–º–∞–ª—ñ–π.")
            df['–ü—ñ–¥–æ–∑—Ä—ñ–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è'] = False

        df['–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (datetime)'] = df.apply(lambda row: combine_and_convert_datetime(row, '–î–∞—Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è', '–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è'), axis=1)
        df['–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è (datetime)'] = df.apply(lambda row: combine_and_convert_datetime(row, '–î–∞—Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è', '–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è'), axis=1)
        df["–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞)"] = df["–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (datetime)"].dt.date
        df["–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)"] = (df["–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (datetime)"] - df["–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (datetime)"]).dt.total_seconds() / 60
        df["–ß–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)"] = (df["–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è (datetime)"] - df["–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (datetime)"]).dt.total_seconds() / 60

        if "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏" in df.columns:
            df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"] = df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"].fillna("")
            df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"] = df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"].apply(
                lambda x: [s.strip() for s in str(x).split(',') if s.strip()] if pd.notna(x) else ["–ù–µ –≤–∫–∞–∑–∞–Ω–æ"]
            )
            df = df.explode("–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏")
            st.info("‚ÑπÔ∏è –°—Ç–æ–≤–ø–µ—Ü—å '–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏' –±—É–ª–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ –¥–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è.")

        # --- –ë–æ–∫–æ–≤–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ ---
        st.sidebar.header("üîç –§—ñ–ª—å—Ç—Ä–∏ –¥–∞–Ω–∏—Ö")
        selected_types = st.sidebar.multiselect("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø(–∏) –∑–∞—è–≤–∫–∏", sorted(df["–¢–∏–ø –∑–∞—è–≤–∫–∏"].dropna().unique().tolist()), default=df["–¢–∏–ø –∑–∞—è–≤–∫–∏"].dropna().unique().tolist()) if "–¢–∏–ø –∑–∞—è–≤–∫–∏" in df.columns else []
        selected_workshops = st.sidebar.multiselect("–û–±–µ—Ä—ñ—Ç—å —Ü–µ—Ö(–∏)", sorted(df["–¶–µ—Ö"].dropna().unique().tolist()), default=df["–¶–µ—Ö"].dropna().unique().tolist()) if "–¶–µ—Ö" in df.columns else []
        selected_responsible_services = st.sidebar.multiselect("–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—É(—ñ) —Å–ª—É–∂–±—É(–∏)", sorted(df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"].dropna().unique().tolist()), default=df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"].dropna().unique().tolist()) if "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏" in df.columns else []
        filter_anomalies = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –ª–∏—à–µ –ø—ñ–¥–æ–∑—Ä—ñ–ª—ñ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è", value=False)
        min_date_available = df["–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞)"].min()
        max_date_available = df["–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞)"].max()
        start_date = st.sidebar.date_input("–ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞", value=min_date_available, min_value=min_date_available, max_value=max_date_available)
        end_date = st.sidebar.date_input("–ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞", value=max_date_available, min_value=min_date_available, max_value=max_date_available)

        # --- –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ ---
        filtered_df = df.copy()
        if selected_types: filtered_df = filtered_df[filtered_df["–¢–∏–ø –∑–∞—è–≤–∫–∏"].isin(selected_types)]
        if selected_workshops: filtered_df = filtered_df[filtered_df["–¶–µ—Ö"].isin(selected_workshops)]
        if selected_responsible_services: filtered_df = filtered_df[filtered_df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"].isin(selected_responsible_services)]
        if filter_anomalies: filtered_df = filtered_df[filtered_df['–ü—ñ–¥–æ–∑—Ä—ñ–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è'] == True]
        filtered_df = filtered_df[(filtered_df["–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞)"] >= start_date) & (filtered_df["–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞)"] <= end_date)]

        if filtered_df.empty:
            st.warning("‚ö†Ô∏è –ü—ñ—Å–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            st.stop()
        
        # --- –ü–æ—à—É–∫ –ø–æ –∑–∞—è–≤–∫–∞—Ö ---
        search_query = st.text_input("üîç –ü–æ—à—É–∫ –ø–æ –∑–∞—è–≤–∫–∞—Ö (–≤–≤–µ–¥—ñ—Ç—å —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∞–±–æ –æ–ø–∏—Å —Ä–æ–±—ñ—Ç)", "")
        if search_query:
            filtered_df = filtered_df[
                filtered_df['–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä'].astype(str).str.contains(search_query, case=False, na=False) |
                filtered_df['–û–ø–∏—Å —Ä–æ–±—ñ—Ç'].astype(str).str.contains(search_query, case=False, na=False)
            ]
            if filtered_df.empty:
                st.info("‚ÑπÔ∏è –ó–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        
        # --- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–≤–ø—Ü—è –∑ –≤—ñ–∑—É–∞–ª—å–Ω–∏–º–∏ –ø–æ–∑–Ω–∞—á–∫–∞–º–∏ ---
        def get_visual_status(row):
            statuses = []
            if pd.notna(row['–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)']) and row['–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)'] > 15:
                statuses.append("üî¥ >15 —Ö–≤")
            if row['–ü—ñ–¥–æ–∑—Ä—ñ–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è']:
                statuses.append("‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä")
            return ", ".join(statuses) if statuses else ""

        filtered_df['–°—Ç–∞—Ç—É—Å'] = filtered_df.apply(get_visual_status, axis=1)

        # --- –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ---
        columns_to_display = [
            "–°—Ç–∞—Ç—É—Å", "–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä", "–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è", "–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è", "–¢–∏–ø –∑–∞—è–≤–∫–∏", "–¶–µ—Ö", 
            "–õ—ñ–Ω—ñ—è", "–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è", "–û–ø–∏—Å —Ä–æ–±—ñ—Ç", "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏", 
            "–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)", "–ß–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)", "–ó–≤—ñ—Ç –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω—É —Ä–æ–±–æ—Ç—É",
            "–†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–∞—è–≤–∫–∏"
        ]
        filtered_columns_to_display = [col for col in columns_to_display if col in filtered_df.columns]

        # --- –Ñ–¥–∏–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É ---
        st.subheader("üìã –¢–∞–±–ª–∏—Ü—è –∑–∞—è–≤–æ–∫")
        st.markdown("–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —Å–≤–æ—ó –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –≤ —Å—Ç–æ–≤–ø–µ—Ü—å **'–†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–∞—è–≤–∫–∏'**.")
        
        editable_df = st.data_editor(
            filtered_df[filtered_columns_to_display].copy(),
            use_container_width=True, 
            hide_index=True,
            column_config={
                "–†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–∞—è–≤–∫–∏": st.column_config.TextColumn("–†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–∞—è–≤–∫–∏"),
                "–°—Ç–∞—Ç—É—Å": st.column_config.TextColumn("–°—Ç–∞—Ç—É—Å", disabled=True),
                "–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)": st.column_config.NumberColumn("–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)", format="%.1f", disabled=True),
                "–ß–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)": st.column_config.NumberColumn("–ß–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)", format="%.1f", disabled=True),
            },
            disabled=[col for col in filtered_columns_to_display if col not in ["–†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–∞—è–≤–∫–∏"]]
        )

        st.markdown("---")

        # --- –ö–Ω–æ–ø–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ---
        col1, col2 = st.columns(2)

        @st.cache_data
        def convert_df_to_csv(df_to_convert):
            df_to_convert = df_to_convert.drop(columns=['–°—Ç–∞—Ç—É—Å'], errors='ignore')
            
            if '–†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–∞—è–≤–∫–∏' not in df_to_convert.columns:
                df_to_convert['–†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–∞—è–≤–∫–∏'] = ''
            
            # –¢–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–º—É —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ —ñ –∫–æ–¥—É–≤–∞–Ω–Ω—è utf-8-sig
            return df_to_convert.to_csv(index=False, sep=',', encoding='utf-8-sig')

        with col1:
            st.download_button(
                label="‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–∏–π CSV",
                data=convert_df_to_csv(editable_df),
                file_name=f'–æ–Ω–æ–≤–ª–µ–Ω—ñ_–∑–∞—è–≤–∫–∏_{pd.Timestamp.now().strftime("%Y-%m-%d")}.csv',
                mime='text/csv',
                help='–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—É —Ç–∞ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω—É —Ç–∞–±–ª–∏—Ü—é —É —Ñ–æ—Ä–º–∞—Ç—ñ CSV'
            )

        with col2:
            commented_df = editable_df[editable_df['–†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–∞—è–≤–∫–∏'].str.strip() != '']
            if not commented_df.empty:
                st.download_button(
                    label="‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–≤—ñ—Ç –ø–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è—Ö",
                    data=convert_df_to_csv(commented_df),
                    file_name=f'–∑–≤—ñ—Ç_–ø–æ_–∫–æ–º–µ–Ω—Ç–∞—Ä—è—Ö_{pd.Timestamp.now().strftime("%Y-%m-%d")}.csv',
                    mime='text/csv',
                    help='–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ç—ñ –∑–∞—è–≤–∫–∏, –¥–æ —è–∫–∏—Ö –≤–∏ –¥–æ–¥–∞–ª–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ'
                )
            else:
                st.info("–©–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–≤—ñ—Ç, –¥–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ —Ö–æ—á–∞ –± –¥–æ –æ–¥–Ω—ñ—î—ó –∑–∞—è–≤–∫–∏.")

        st.markdown("---")

        # --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–∏–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º) ---
        st.subheader("üìä –ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö")
        unique_tasks_df = editable_df.drop_duplicates(subset=['–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä'])
        
        col_avg1, col_avg2 = st.columns(2)
        avg_–≤–∏–∫–æ–Ω–∞–Ω–Ω—è = unique_tasks_df['–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)'].dropna().mean()
        avg_–∑–∞–∫—Ä–∏—Ç—Ç—è = unique_tasks_df['–ß–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)'].dropna().mean()
        col_avg1.metric("–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)", f"{avg_–≤–∏–∫–æ–Ω–∞–Ω–Ω—è:.1f}" if pd.notna(avg_–≤–∏–∫–æ–Ω–∞–Ω–Ω—è) else "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
        col_avg2.metric("–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)", f"{avg_–∑–∞–∫—Ä–∏—Ç—Ç—è:.1f}" if pd.notna(avg_–∑–∞–∫—Ä–∏—Ç—Ç—è) else "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
        
        st.markdown("---")
        col_total1, col_total2 = st.columns(2) 
        total_execution_time_minutes = unique_tasks_df["–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)"].dropna().sum() if "–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)" in unique_tasks_df.columns else 0.0
        col_total1.metric("–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)", f"{total_execution_time_minutes:.1f}" if pd.notna(total_execution_time_minutes) else "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
        total_downtime_minutes = 0.0
        downtime_types = ["–ü—Ä–æ—Å—Ç—ñ–π", "–ü—Ä–æ—Å—Ç—ñ–π –†–¶"]
        if "–¢–∏–ø –∑–∞—è–≤–∫–∏" in unique_tasks_df.columns and "–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)" in unique_tasks_df.columns:
            downtime_df = unique_tasks_df[unique_tasks_df["–¢–∏–ø –∑–∞—è–≤–∫–∏"].isin(downtime_types)]
            total_downtime_minutes = downtime_df["–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)"].dropna().sum()
        col_total2.metric("–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –ø—Ä–æ—Å—Ç–æ—é (—Ö–≤)", f"{total_downtime_minutes:.1f}" if pd.notna(total_downtime_minutes) else "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
        st.markdown("---")

        st.subheader("‚öôÔ∏è –ê–Ω–∞–ª—ñ–∑ —á–∞—Å—É –Ω–∞ –º–∞—à–∏–Ω—É")
        if "–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è" in editable_df.columns and not editable_df["–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è"].empty:
            st.markdown("##### –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é")
            if not editable_df["–ß–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)"].dropna().empty:
                agg_avg_closure = unique_tasks_df.groupby("–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è")["–ß–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)"].mean().sort_values(ascending=False)
                fig_avg_closure = px.bar(agg_avg_closure, x=agg_avg_closure.index, y=agg_avg_closure.values, labels={'x':'–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è', 'y':'–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)'}, title='–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é', height=400)
                st.plotly_chart(fig_avg_closure, use_container_width=True)
            else:
                st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–∞—Å—É –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é.")
            
            st.markdown("##### –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é")
            if not editable_df["–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)"].dropna().empty:
                agg_total_execution = unique_tasks_df.groupby("–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è")["–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)"].sum().sort_values(ascending=False)
                fig_total_execution = px.bar(agg_total_execution, x=agg_total_execution.index, y=agg_total_execution.values, labels={'x':'–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è', 'y':'–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)'}, title='–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é', height=400)
                st.plotly_chart(fig_total_execution, use_container_width=True)
            else:
                st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é.")
        else:
            st.info("–ù–µ–º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö (–∞–±–æ —Å—Ç–æ–≤–ø—Ü—è '–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è') –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —á–∞—Å—É –Ω–∞ –º–∞—à–∏–Ω—É.")
        st.success("‚úÖ –ê–Ω–∞–ª—ñ–∑ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    except Exception as e:
        st.error(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É: {e}")
        st.info(f"–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {type(e).__name__}: {e}")
        st.info("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à —Ñ–∞–π–ª. –ú–æ–∂–ª–∏–≤–æ, –¥–µ—è–∫—ñ —Å—Ç–æ–≤–ø—Ü—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –¥–∞–Ω—ñ –º–∞—é—Ç—å –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.")
elif df is None:
    st.info("‚¨ÜÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV-—Ñ–∞–π–ª, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑.")
