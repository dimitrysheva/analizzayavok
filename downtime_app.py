import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px # –î–ª—è –∫—Ä–∞—â–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤, —è–∫—ñ –º–æ–∂–Ω–∞ –º–∞—Å—à—Ç–∞–±—É–≤–∞—Ç–∏

st.set_page_config(layout="wide", page_title="–ê–Ω–∞–ª—ñ–∑ –∑–∞—è–≤–æ–∫ –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é", page_icon="‚öôÔ∏è")

st.title("‚öôÔ∏è –ê–Ω–∞–ª—ñ–∑ –∑–∞—è–≤–æ–∫ –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é")

st.markdown("""
    –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à **CSV-—Ñ–∞–π–ª** –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –∑–∞—è–≤–∫–∏, –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å URL –¥–æ —Ñ–∞–π–ª—É –æ–Ω–ª–∞–π–Ω.
    –¶–µ–π –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ —Ç–µ–ø–µ—Ä –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –¥–∞—Ç —Ç–∞ —á–∞—Å—É,
    –≤—Ä–∞—Ö–æ–≤—É—é—á–∏, —â–æ CSV-—Ñ–∞–π–ª–∏ –º–æ–∂—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫—Ä–∞–ø–∫—É –∑ –∫–æ–º–æ—é (`;`) —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫
    —ñ —á–∞—Å –º–æ–∂–µ –±—É—Ç–∏ –±–µ–∑ —Å–µ–∫—É–Ω–¥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `–ì–ì:–•–•`).
    
    **–§—ñ–ª—å—Ç—Ä–∏ —Ç–µ–ø–µ—Ä –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å –º–Ω–æ–∂–∏–Ω–Ω–∏–π –≤–∏–±—ñ—Ä**, —â–æ –¥–æ–∑–≤–æ–ª—è—î –∫–æ–º–±—ñ–Ω—É–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ –∫—Ä–∏—Ç–µ—Ä—ñ—ó, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥,
    –≤–∏–±—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ —Ç–∏–ø—ñ–≤ –∑–∞—è–≤–æ–∫ –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–∞ —Ü–µ—Ö—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ.
    
    **–û—á—ñ–∫—É–≤–∞–Ω—ñ —Å—Ç–æ–≤–ø—Ü—ñ**:
    * "–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è" —Ç–∞ "–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è" (–æ–±–æ–≤'—è–∑–∫–æ–≤—ñ)
    * "–î–∞—Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è" —Ç–∞ "–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è" (—è–∫—â–æ —î, –æ–∫—Ä–µ–º–æ –∞–±–æ –≤ –æ–¥–Ω–æ–º—É —Å—Ç–æ–≤–ø—Ü—ñ)
    * "–î–∞—Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è" —Ç–∞ "–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è" (—è–∫—â–æ —î, –æ–∫—Ä–µ–º–æ –∞–±–æ –≤ –æ–¥–Ω–æ–º—É —Å—Ç–æ–≤–ø—Ü—ñ)
    * –ê —Ç–∞–∫–æ–∂: "–¢–∏–ø –∑–∞—è–≤–∫–∏", "–¶–µ—Ö", "–õ—ñ–Ω—ñ—è", "–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è", "–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä", "–ó–≤—ñ—Ç –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω—É —Ä–æ–±–æ—Ç—É", "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏".
""")

# --- –í–∏–±—ñ—Ä –¥–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö ---
st.sidebar.header("–î–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö")
data_source_option = st.sidebar.radio(
    "–û–±–µ—Ä—ñ—Ç—å, –∑–≤—ñ–¥–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ:",
    ("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –∑ –∫–æ–º–ø'—é—Ç–µ—Ä–∞", "–í–≤–µ—Å—Ç–∏ URL —Ñ–∞–π–ª—É –æ–Ω–ª–∞–π–Ω")
)

df = None # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ DataFrame —è–∫ None

if data_source_option == "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –∑ –∫–æ–º–ø'—é—Ç–µ—Ä–∞":
    uploaded_file = st.file_uploader("üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV-—Ñ–∞–π–ª", type=["csv"])
    if uploaded_file:
        try:
            uploaded_file.seek(0)
            try:
                df = pd.read_csv(uploaded_file, sep=';', encoding='utf-8')
            except Exception:
                uploaded_file.seek(0)
                df = pd.read_csv(uploaded_file, sep=';', encoding='cp1251')
            
            if df.empty or len(df.columns) <= 2:
                uploaded_file.seek(0)
                try:
                    df = pd.read_csv(uploaded_file, sep=',', encoding='utf-8')
                except Exception:
                    uploaded_file.seek(0)
                    df = pd.read_csv(uploaded_file, sep=',', encoding='cp1251')
            
            if df.empty or len(df.columns) <= 2:
                uploaded_file.seek(0)
                try:
                    df = pd.read_csv(uploaded_file, encoding='utf-8-sig')
                except Exception:
                    uploaded_file.seek(0)
                    df = pd.read_csv(uploaded_file, encoding='cp1251')

            st.success("‚úÖ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
        except Exception as e:
            st.error(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
            st.info("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —Ñ–∞–π–ª –Ω–µ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π —Ç–∞ —á–∏ —î —É –Ω—å–æ–º—É –¥–∞–Ω—ñ.")
            df = None # –°–∫–∏–¥–∞—î–º–æ df, —â–æ–± –Ω–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É

elif data_source_option == "–í–≤–µ—Å—Ç–∏ URL —Ñ–∞–π–ª—É –æ–Ω–ª–∞–π–Ω":
    data_url = st.text_input("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–∏–π URL –¥–æ CSV —Ñ–∞–π–ª—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, https://example.com/my_data.csv):")
    if data_url:
        try:
            if data_url.endswith('.csv'):
                df = pd.read_csv(data_url, sep=';', encoding='utf-8')
                if df.empty or len(df.columns) <= 2:
                     df = pd.read_csv(data_url, sep=',', encoding='utf-8')
                     if df.empty or len(df.columns) <= 2:
                         df = pd.read_csv(data_url, encoding='utf-8-sig')
                         if df.empty or len(df.columns) <= 2:
                             df = pd.read_csv(data_url, encoding='cp1251')
            else:
                st.error("‚ùå –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É –∑–∞ URL. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å URL —Ç—ñ–ª—å–∫–∏ –¥–æ —Ñ–∞–π–ª—É .csv.")
                df = None
            st.success(f"‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑: {data_url}")
        except Exception as e:
            st.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∑ URL: {e}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ URL, –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–Ω–∏–π –ø—É–±–ª—ñ—á–Ω–æ —Ç–∞ –π–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä–µ–∫—Ç–Ω–∏–π.")
            df = None # –°–∫–∏–¥–∞—î–º–æ df, —â–æ–± –Ω–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É

# --- –í—Å—è –ø–æ–¥–∞–ª—å—à–∞ –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö —Ç–µ–ø–µ—Ä –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ df –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π ---
if df is not None and not df.empty:
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤
        critical_date_time_cols = ["–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è", "–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è"]
        for col in critical_date_time_cols:
            if col not in df.columns:
                st.error(f"‚ùå –£ —Ñ–∞–π–ª—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å: '{col}'. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à —Ñ–∞–π–ª.")
                st.stop()

        # –î–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å—Ç–æ–≤–ø–µ—Ü—å "–ó–≤—ñ—Ç –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω—É —Ä–æ–±–æ—Ç—É", —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        if "–ó–≤—ñ—Ç –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω—É —Ä–æ–±–æ—Ç—É" not in df.columns:
            df["–ó–≤—ñ—Ç –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω—É —Ä–æ–±–æ—Ç—É"] = ""
            st.info("‚ÑπÔ∏è –°—Ç–æ–≤–ø–µ—Ü—å '–ó–≤—ñ—Ç –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω—É —Ä–æ–±–æ—Ç—É' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É —Ñ–∞–π–ª—ñ —ñ –±—É–≤ –¥–æ–¥–∞–Ω–∏–π —è–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        
        # –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å "–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä", —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î (–¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
        if "–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä" not in df.columns:
            df["–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä"] = df.index + 1 # –ü—Ä–æ—Å—Ç–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ä—è–¥–∫–∞
            st.info("‚ÑπÔ∏è –°—Ç–æ–≤–ø–µ—Ü—å '–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É —Ñ–∞–π–ª—ñ —ñ –±—É–≤ –¥–æ–¥–∞–Ω–∏–π.")
        
        # –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å "–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è" —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î (–¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ –∞–≥—Ä–µ–≥–∞—Ü—ñ—ó)
        if "–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è" not in df.columns:
            df["–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è"] = "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
            st.info("‚ÑπÔ∏è –°—Ç–æ–≤–ø–µ—Ü—å '–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É —Ñ–∞–π–ª—ñ —ñ –±—É–≤ –¥–æ–¥–∞–Ω–∏–π –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'.")

        # –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏" —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î (–¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó/–≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ)
        if "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏" not in df.columns:
            df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"] = "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
            st.info("‚ÑπÔ∏è –°—Ç–æ–≤–ø–µ—Ü—å '–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É —Ñ–∞–π–ª—ñ —ñ –±—É–≤ –¥–æ–¥–∞–Ω–∏–π –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'.")

        # --- –ù–û–í–ê –õ–û–ì–Ü–ö–ê: –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è —Ç–∞ "–≤–∏–±—É—Ö" —Å—Ç–æ–≤–ø—Ü—è "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏" ---
        if "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏" in df.columns:
            # –ó–∞–º—ñ–Ω—é—î–º–æ NaN –Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ str.split
            df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"] = df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"].fillna("")
            
            # –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ä—è–¥–æ–∫ –∑–∞ –∫–æ–º–æ—é –∑ –º–æ–∂–ª–∏–≤–∏–º–∏ –ø—Ä–æ–±—ñ–ª–∞–º–∏, –ø–æ—Ç—ñ–º –æ–±—Ä—ñ–∑–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏
            # —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏ –ø—ñ—Å–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è
            df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"] = df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"].apply(
                lambda x: [s.strip() for s in str(x).split(',') if s.strip()] if pd.notna(x) else ["–ù–µ –≤–∫–∞–∑–∞–Ω–æ"]
            )
            
            # "–í–∏–±—É—Ö–∞—î–º–æ" DataFrame, —Å—Ç–≤–æ—Ä—é—é—á–∏ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å–ª—É–∂–±–∏
            # –¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∫–æ–∂–Ω—É —Å–ª—É–∂–±—É –æ–∫—Ä–µ–º–æ
            df = df.explode("–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏")
            st.info("‚ÑπÔ∏è –°—Ç–æ–≤–ø–µ—Ü—å '–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏' –±—É–ª–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ –¥–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö —Å–ª—É–∂–± –≤ –æ–¥–Ω—ñ–π –∫–æ–º—ñ—Ä—Ü—ñ.")


        # --- –°–ø–∏—Å–æ–∫ –ø–æ—à–∏—Ä–µ–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è ---
        date_formats = [
            "%Y-%m-%d",    # 2025-07-06
            "%d.%m.%Y",    # 06.07.2025
            "%m/%d/%Y",    # 07/06/2025
            "%d/%m/%Y",    # 06/07/2025
            "%Y/%m/%d"     # 2025/07/06
        ]
        time_formats = [
            "%H:%M:%S",    # 12:31:00
            "%H:%M"        # 12:31
        ]
        
        # –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ (–¥–∞—Ç–∞ + –ø—Ä–æ–±—ñ–ª + —á–∞—Å)
        combined_datetime_formats = [
            f"{d_fmt} {t_fmt}" for d_fmt in date_formats for t_fmt in time_formats
        ]
        
        # –î–æ–¥–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç–∏, –¥–µ —Å—Ç–æ–≤–ø–µ—Ü—å –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ø–æ–≤–Ω–∏–π datetime —Ä—è–¥–æ–∫ (–±–µ–∑ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è)
        # –∞–±–æ –ª–∏—à–µ –¥–∞—Ç—É. –î–æ–¥–∞—î–º–æ —ó—Ö –Ω–∞ –ø–æ—á–∞—Ç–∫—É, —â–æ–± –≤–æ–Ω–∏ –º–∞–ª–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç, —è–∫—â–æ –≤–∂–µ –ø–æ–≤–Ω–∏–π —Ä—è–¥–æ–∫.
        combined_datetime_formats = [
            "%Y-%m-%d %H:%M:%S",
            "%Y-%m-%d %H:%M",
            "%d.%m.%Y %H:%M:%S",
            "%d.%m.%Y %H:%M",
            "%m/%d/%Y %H:%M:%S",
            "%m/%d/%Y %H:%M",
            "%Y-%m-%dT%H:%M:%S", # ISO format
        ] + combined_datetime_formats
        
        # –î–æ–¥–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç–∏, —â–æ –º—ñ—Å—Ç—è—Ç—å –ª–∏—à–µ –¥–∞—Ç—É (–±–µ–∑ —á–∞—Å—É)
        combined_datetime_formats.extend(date_formats)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –ø–æ—Ä—è–¥–æ–∫ –ø–µ—Ä—à–æ—ó –ø–æ—è–≤–∏
        combined_datetime_formats = list(dict.fromkeys(combined_datetime_formats))


        # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É —Ç–∞ —Å–ø—Ä–æ–±–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∑ –¥–µ–∫—ñ–ª—å–∫–æ–º–∞ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
        def combine_and_convert_datetime(row, date_col_name, time_col_name=None):
            date_val = row.get(date_col_name)
            time_val = row.get(time_col_name) if time_col_name else None

            if pd.isna(date_val) and pd.isna(time_val):
                return np.nan

            # 1. –ó–∞–ª–∏—à–∞—î–º–æ —Å–ø—Ä–æ–±—É –æ–±—Ä–æ–±–∏—Ç–∏ —á–∏—Å–ª–æ–≤—ñ –¥–∞—Ç–∏ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ CSV –º—ñ—Å—Ç–∏—Ç—å —Ç–∞–∫—ñ
            try:
                if pd.api.types.is_numeric_dtype(type(date_val)) and pd.notna(date_val):
                    base_date = pd.to_datetime('1899-12-30')
                    converted_date = base_date + pd.to_timedelta(date_val, unit='D')
                    
                    if pd.notna(converted_date):
                        if pd.api.types.is_numeric_dtype(type(time_val)) and pd.notna(time_val):
                            converted_time = pd.to_timedelta(time_val, unit='D')
                            return converted_date + converted_time
                        return converted_date
            except Exception:
                pass
            
            # 2. –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —è–∫ —á–∏—Å–ª–æ–≤—É –¥–∞—Ç—É, –æ–±—Ä–æ–±–ª—è—î–º–æ —è–∫ —Ä—è–¥–∫–∏
            date_str = str(date_val).strip() if pd.notna(date_val) else ""
            time_str = str(time_val).strip() if pd.notna(time_val) else ""

            combined_str = ""
            if date_str and time_str:
                combined_str = f"{date_str} {time_str}"
            elif date_str:
                combined_str = date_str
            elif time_str:
                combined_str = time_str
            
            if not combined_str:
                return np.nan

            for fmt in combined_datetime_formats:
                try:
                    return pd.to_datetime(combined_str, format=fmt)
                except (ValueError, TypeError):
                    continue
            
            try:
                return pd.to_datetime(combined_str, infer_datetime_format=True, errors='coerce')
            except (ValueError, TypeError):
                return np.nan

        # –û–±—Ä–æ–±–∫–∞ "–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è"
        df['–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (datetime)'] = df.apply(lambda row: combine_and_convert_datetime(row, '–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è', '–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'), axis=1)

        # –û–±—Ä–æ–±–∫–∞ "–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"
        if "–î–∞—Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è" in df.columns and "–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è" in df.columns:
            df['–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (datetime)'] = df.apply(lambda row: combine_and_convert_datetime(row, '–î–∞—Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è', '–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è'), axis=1)
        elif "–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è" in df.columns:
            df['–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (datetime)'] = df['–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è'].apply(lambda x: combine_and_convert_datetime({'val': x}, 'val'))
        else:
            df['–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (datetime)'] = np.nan

        # –û–±—Ä–æ–±–∫–∞ "–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è"
        if "–î–∞—Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è" in df.columns and "–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è" in df.columns:
            df['–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è (datetime)'] = df.apply(lambda row: combine_and_convert_datetime(row, '–î–∞—Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è', '–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è'), axis=1)
        elif "–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è" in df.columns:
            df['–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è (datetime)'] = df['–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è'].apply(lambda x: combine_and_convert_datetime({'val': x}, 'val'))
        else:
            df['–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è (datetime)'] = np.nan

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤, –¥–µ "–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è" –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ (NaT)
        initial_rows = len(df)
        df.dropna(subset=["–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (datetime)"], inplace=True)
        if len(df) < initial_rows:
            st.warning(f"‚ö†Ô∏è –í–∏–¥–∞–ª–µ–Ω–æ {initial_rows - len(df)} —Ä—è–¥–∫—ñ–≤ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π '–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª. –ú–æ–∂–ª–∏–≤–æ, –¥–µ—è–∫—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª–∏ –æ—á—ñ–∫—É–≤–∞–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç–∞–º.")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
        if df.empty:
            st.warning("‚ö†Ô∏è –ü—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ –¥–∞—Ç —É —Ñ–∞–π–ª—ñ –Ω–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—è –¥—ñ–π—Å–Ω–∏—Ö –¥–∞–Ω–∏—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª.")
            st.stop()

        # –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ (–¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞) - —Ç–µ–ø–µ—Ä –±–µ—Ä–µ–º–æ –∑ –Ω–æ–≤–æ–≥–æ –æ–±'—î–¥–Ω–∞–Ω–æ–≥–æ —Å—Ç–æ–≤–ø—Ü—è
        df["–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞)"] = df["–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (datetime)"].dt.date

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –æ–±'—î–¥–Ω–∞–Ω—ñ datetime —Å—Ç–æ–≤–ø—Ü—ñ
        df["–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)"] = (df["–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (datetime)"] - df["–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (datetime)"]).dt.total_seconds() / 60
        df["–ß–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)"] = (df["–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è (datetime)"] - df["–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (datetime)"]).dt.total_seconds() / 60

        # --- –ë–æ–∫–æ–≤–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ ---
        st.sidebar.header("üîç –§—ñ–ª—å—Ç—Ä–∏ –¥–∞–Ω–∏—Ö")

        # –§—ñ–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∑–∞—è–≤–∫–∏ (—Ç–µ–ø–µ—Ä multiselect)
        selected_types = []
        if "–¢–∏–ø –∑–∞—è–≤–∫–∏" in df.columns and not df["–¢–∏–ø –∑–∞—è–≤–∫–∏"].dropna().empty:
            —Ç–∏–ø–∏_–∑–∞—è–≤–æ–∫ = df["–¢–∏–ø –∑–∞—è–≤–∫–∏"].dropna().unique().tolist()
            selected_types = st.sidebar.multiselect("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø(–∏) –∑–∞—è–≤–∫–∏", sorted(—Ç–∏–ø–∏_–∑–∞—è–≤–æ–∫), default=—Ç–∏–ø–∏_–∑–∞—è–≤–æ–∫)
            
        else:
            st.sidebar.info("–°—Ç–æ–≤–ø–µ—Ü—å '–¢–∏–ø –∑–∞—è–≤–∫–∏' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π. –§—ñ–ª—å—Ç—Ä –≤–∏–º–∫–Ω–µ–Ω–æ.")
        

        # –§—ñ–ª—å—Ç—Ä –ø–æ —Ü–µ—Ö—É (—Ç–µ–ø–µ—Ä multiselect)
        selected_workshops = []
        if "–¶–µ—Ö" in df.columns and not df["–¶–µ—Ö"].dropna().empty:
            —Ü–µ—Ö–∏ = df["–¶–µ—Ö"].dropna().unique().tolist()
            selected_workshops = st.sidebar.multiselect("–û–±–µ—Ä—ñ—Ç—å —Ü–µ—Ö(–∏)", sorted(—Ü–µ—Ö–∏), default=—Ü–µ—Ö–∏)
        else:
            st.sidebar.info("–°—Ç–æ–≤–ø–µ—Ü—å '–¶–µ—Ö' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π. –§—ñ–ª—å—Ç—Ä –≤–∏–º–∫–Ω–µ–Ω–æ.")

        # --- –§–Ü–õ–¨–¢–†: –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏ (—Ç–µ–ø–µ—Ä –∫–æ—Ä–µ–∫—Ç–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ) ---
        selected_responsible_services = []
        if "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏" in df.columns and not df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"].dropna().empty:
            # –¢–µ–ø–µ—Ä unique() –ø–æ–≤–µ—Ä–Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω—ñ –æ–∫—Ä–µ–º—ñ —Å–ª—É–∂–±–∏ –∑–∞–≤–¥—è–∫–∏ df.explode() –≤–∏—â–µ
            responsible_services = df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"].dropna().unique().tolist()
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ "–ù–µ –≤–∫–∞–∑–∞–Ω–æ", —è–∫—â–æ –≤–æ–Ω–æ —î, —ñ –ø–µ—Ä–µ–º—ñ—â—É—î–º–æ –≤ –∫—ñ–Ω–µ—Ü—å
            if "–ù–µ –≤–∫–∞–∑–∞–Ω–æ" in responsible_services:
                responsible_services.remove("–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
                responsible_services.sort()
                responsible_services.append("–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            else:
                responsible_services.sort()
            
            selected_responsible_services = st.sidebar.multiselect(
                "–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—É(—ñ) —Å–ª—É–∂–±—É(–∏)", 
                responsible_services, 
                default=responsible_services
            )
        else:
            st.sidebar.info("–°—Ç–æ–≤–ø–µ—Ü—å '–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π. –§—ñ–ª—å—Ç—Ä –≤–∏–º–∫–Ω–µ–Ω–æ.")


        # –§—ñ–ª—å—Ç—Ä –ø–æ –¥–∞—Ç—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ "–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞)")
        min_date_available = df["–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞)"].min()
        max_date_available = df["–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞)"].max()

        if pd.isna(min_date_available) or pd.isna(max_date_available):
            st.error("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–æ–≤–ø—Ü—ñ '–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è' —Ç–∞ '–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è' —É –≤–∞—à–æ–º—É —Ñ–∞–π–ª—ñ. –ú–æ–∂–ª–∏–≤–æ, –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —î –Ω–µ–¥—ñ–π—Å–Ω–∏–º–∏.")
            st.stop()

        start_date = st.sidebar.date_input("–ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞", value=min_date_available, min_value=min_date_available, max_value=max_date_available)
        end_date = st.sidebar.date_input("–ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞", value=max_date_available, min_value=min_date_available, max_value=max_date_available)


        # --- –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ ---
        filtered_df = df.copy()

        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –¢–∏–ø–æ–º –∑–∞—è–≤–∫–∏
        if selected_types and "–¢–∏–ø –∑–∞—è–≤–∫–∏" in filtered_df.columns:
            filtered_df = filtered_df[filtered_df["–¢–∏–ø –∑–∞—è–≤–∫–∏"].isin(selected_types)]

        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –¶–µ—Ö–æ–º
        if selected_workshops and "–¶–µ—Ö" in filtered_df.columns:
            filtered_df = filtered_df[filtered_df["–¶–µ—Ö"].isin(selected_workshops)]
        
        # --- –ó–ê–°–¢–û–°–£–í–ê–ù–ù–Ø –í–î–û–°–ö–û–ù–ê–õ–ï–ù–û–ì–û –§–Ü–õ–¨–¢–†–£ ---
        if selected_responsible_services and "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏" in filtered_df.columns:
            filtered_df = filtered_df[filtered_df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"].isin(selected_responsible_services)]


        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ "–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞)"
        filtered_df = filtered_df[(filtered_df["–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞)"] >= start_date) & (filtered_df["–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞)"] <= end_date)]

        if filtered_df.empty:
            st.warning("‚ö†Ô∏è –ü—ñ—Å–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.")
            st.stop()

        # --- –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –ø–æ–Ω–∞–¥ 15 —Ö–≤ ---
        def highlight_over_15(val):
            return 'background-color: lightcoral' if pd.notna(val) and val > 15 else ''

        # --- –¢–∞–±–ª–∏—Ü—è ---
        —Å—Ç–æ–≤–ø—Ü—ñ = [
            "–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä",
            "–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è",
            "–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è",
            "–î–∞—Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è",
            "–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è",
            "–î–∞—Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è",
            "–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è",
            "–¢–∏–ø –∑–∞—è–≤–∫–∏",
            "–¶–µ—Ö",
            "–õ—ñ–Ω—ñ—è",
            "–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è",
            "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏", 
            "–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)",
            "–ß–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)",
            "–ó–≤—ñ—Ç –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω—É —Ä–æ–±–æ—Ç—É"
        ]

        # –î–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —Ç–∞–±–ª–∏—Ü—ñ, –º–æ–∂–ª–∏–≤–æ, –∫—Ä–∞—â–µ –∑–≥—Ä—É–ø—É–≤–∞—Ç–∏ –Ω–∞–∑–∞–¥, –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —è–∫ —î
        # –ê–ª–µ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ —ñ –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É "–≤–∏–±—É—Ö" —î –∫—Ä–∏—Ç–∏—á–Ω–∏–º.
        # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–± —É —Ç–∞–±–ª–∏—Ü—ñ –∑–Ω–æ–≤—É –≤—ñ–¥–æ–±—Ä–∞–∂–∞–ª–æ—Å—è –∫—ñ–ª—å–∫–∞ —Å–ª—É–∂–± —á–µ—Ä–µ–∑ –∫–æ–º—É,
        # –∞–ª–µ —Ñ—ñ–ª—å—Ç—Ä–∏ –ø—Ä–∞—Ü—é–≤–∞–ª–∏ –ø–æ –æ–∫—Ä–µ–º–∏—Ö —Å–ª—É–∂–±–∞—Ö, —Ç–æ —Ü–µ —Å–∫–ª–∞–¥–Ω—ñ—à–∞ –ª–æ–≥—ñ–∫–∞ –∑ duplcated() —Ç–∞ —ñ–Ω.
        # –ù–∞—Ä–∞–∑—ñ, —Ç–∞–±–ª–∏—Ü—è –±—É–¥–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø–æ –æ–¥–Ω—ñ–π —Å–ª—É–∂–±—ñ –Ω–∞ —Ä—è–¥–æ–∫, –¥—É–±–ª—é—é—á–∏ —ñ–Ω—à—ñ –¥–∞–Ω—ñ.
        # –¶–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞ –ø—ñ—Å–ª—è df.explode().

        —Å—Ç–æ–≤–ø—Ü—ñ_–¥–ª—è_–≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è = [col for col in —Å—Ç–æ–≤–ø—Ü—ñ if col in filtered_df.columns]

        if not —Å—Ç–æ–≤–ø—Ü—ñ_–¥–ª—è_–≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è:
            st.warning("‚ö†Ô∏è –ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —Ç–∞–±–ª–∏—Ü—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–º–µ–Ω–∞ —Å—Ç–æ–≤–ø—Ü—ñ–≤.")
            st.stop()

        styled_df = filtered_df[—Å—Ç–æ–≤–ø—Ü—ñ_–¥–ª—è_–≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è].style.applymap(
            highlight_over_15, subset=[col for col in ["–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)", "–ß–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)"] if col in filtered_df.columns and col in —Å—Ç–æ–≤–ø—Ü—ñ_–¥–ª—è_–≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è]
        )

        st.subheader("üìã –¢–∞–±–ª–∏—Ü—è –∑–∞—è–≤–æ–∫")
        st.dataframe(styled_df, use_container_width=True, height=500)

        st.markdown("---")

        # --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
        st.subheader("üìä –°–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ —á–∞—Å—É")
        col_avg1, col_avg2 = st.columns(2)

        # –û—Å–∫—ñ–ª—å–∫–∏ df.explode() –¥—É–±–ª—é—î —Ä—è–¥–∫–∏, –¥–ª—è —Å–µ—Ä–µ–¥–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É—Ç–∏ –æ–±–µ—Ä–µ–∂–Ω–∏–º–∏.
        # –Ø–∫—â–æ –∫–æ–∂–Ω–∞ —Å–ª—É–∂–±–∞ –æ–∫—Ä–µ–º–æ –ø–æ–¥–∞–Ω–∞ –Ω–∞ –∑–∞—è–≤–∫—É, —Ç–æ–¥—ñ –≤—Å–µ –æ–∫.
        # –Ø–∫—â–æ –æ–¥–Ω–∞ –∑–∞—è–≤–∫–∞ –º–∞—î –∫—ñ–ª—å–∫–∞ —Å–ª—É–∂–±, —ñ –º–∏ —Ö–æ—á–µ–º–æ —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –ø—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ
        # —á–∞—Å—É –¥–ª—è *—Å–∞–º–æ—ó –∑–∞—è–≤–∫–∏*, —Ç–æ —Ç—Ä–µ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–∏–π DataFrame –∞–±–æ –≤–∏–¥–∞–ª—è—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏
        # –∑–∞ "–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º" –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∞–≥—Ä–µ–≥–∞—Ü—ñ–π, —è–∫—ñ —Å—Ç–æ—Å—É—é—Ç—å—Å—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑–∞—è–≤–æ–∫.
        # –ù–∞—Ä–∞–∑—ñ, —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∞–≥—Ä–µ–≥–∞—Ü—ñ–π –ø—ñ—Å–ª—è explode –±—É–¥–µ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –∫–æ–∂–Ω—É –ø–∞—Ä—É (–∑–∞—è–≤–∫–∞, —Å–ª—É–∂–±–∞) –æ–∫—Ä–µ–º–æ.
        # –¶–µ –º–æ–∂–µ –±—É—Ç–∏ –±–∞–∂–∞–Ω–æ—é –ø–æ–≤–µ–¥—ñ–Ω–∫–æ—é, —è–∫—â–æ –º–∏ —Ö–æ—á–µ–º–æ –±–∞—á–∏—Ç–∏, –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ —Å–ª—É–∂–±–∏
        # –¥–ª—è –∑–∞—è–≤–æ–∫, —è–∫—ñ –¥–æ –Ω–∏—Ö –Ω–∞–¥—Ö–æ–¥—è—Ç—å (–Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –æ–¥–Ω–∞ –∑–∞—è–≤–∫–∞ –ø—ñ—à–ª–∞ –¥–æ –∫—ñ–ª—å–∫–æ—Ö).

        # –î–ª—è –∞–≥—Ä–µ–≥–∞—Ü—ñ—ó –∑–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏ –∑–∞—è–≤–∫–∞–º–∏, –º–æ–∂–Ω–∞ —Ç–∏–º—á–∞—Å–æ–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –∑–∞ –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º
        # –∞–±–æ –≥—Ä—É–ø—É–≤–∞—Ç–∏ –∑–∞ –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º –ø–µ—Ä–µ–¥ –∞–≥—Ä–µ–≥–∞—Ü—ñ—î—é.
        # –ó–∞–ª–∏—à–∞—é —è–∫ —î, —Ç–æ–º—É —â–æ –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ "–ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é" —Ç–∞–∫–∞ –¥–µ–Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–∂–µ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–æ—é.
        
        avg_–≤–∏–∫–æ–Ω–∞–Ω–Ω—è = filtered_df['–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)'].dropna().mean()
        avg_–∑–∞–∫—Ä–∏—Ç—Ç—è = filtered_df['–ß–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)'].dropna().mean()

        col_avg1.metric("–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)", f"{avg_–≤–∏–∫–æ–Ω–∞–Ω–Ω—è:.1f}" if pd.notna(avg_–≤–∏–∫–æ–Ω–∞–Ω–Ω—è) else "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
        col_avg2.metric("–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)", f"{avg_–∑–∞–∫—Ä–∏—Ç—Ç—è:.1f}" if pd.notna(avg_–∑–∞–∫—Ä–∏—Ç—Ç—è) else "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")

        st.markdown("---")

        st.subheader("üìä –°—É–º–∞—Ä–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ —á–∞—Å—É")
        col_total1, col_total2 = st.columns(2) 

        # –î–ª—è —Å—É–º–∞—Ä–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ —á–∞—Å—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ –æ–±–ª—ñ–∫—É,
        # –º–∏ –ø–æ–≤–∏–Ω–Ω—ñ —É–Ω—ñ–∫–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–¥ —Å—É–º—É–≤–∞–Ω–Ω—è–º, —è–∫—â–æ –∑–∞—è–≤–∫–∞ –ø–æ–¥–∞–≤–∞–ª–∞—Å—è –¥–æ –∫—ñ–ª—å–∫–æ—Ö —Å–ª—É–∂–±.
        # –ê–±–æ –∂, —è–∫—â–æ –º–µ—Ç–∞ ‚Äì —Å—É–º—É–≤–∞—Ç–∏ "–∑—É—Å–∏–ª–ª—è" –ø–æ —Å–ª—É–∂–±–∞—Ö, —Ç–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –ø—ñ—Å–ª—è explode –ø—ñ–¥—Ö–æ–¥–∏—Ç—å.
        # –ü—Ä–∏–ø—É—Å—Ç—ñ–º–æ, —â–æ –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É –º–∏ —Ö–æ—á–µ–º–æ —Å—É–º—É–≤–∞—Ç–∏ —á–∞—Å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.
        
        # –°—Ç–≤–æ—Ä–∏–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π DF –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏ –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—É–º—É–≤–∞–Ω–Ω—è
        unique_tasks_df = filtered_df.drop_duplicates(subset=['–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä'])

        total_execution_time_minutes = 0.0
        if "–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)" in unique_tasks_df.columns:
            total_execution_time_minutes = unique_tasks_df["–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)"].dropna().sum()
        
        col_total1.metric("–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)", f"{total_execution_time_minutes:.1f}" if pd.notna(total_execution_time_minutes) else "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")

        total_downtime_minutes = 0.0
        downtime_types = ["–ü—Ä–æ—Å—Ç—ñ–π", "–ü—Ä–æ—Å—Ç—ñ–π –†–¶"] 

        if "–¢–∏–ø –∑–∞—è–≤–∫–∏" in unique_tasks_df.columns and "–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)" in unique_tasks_df.columns:
            downtime_df = unique_tasks_df[unique_tasks_df["–¢–∏–ø –∑–∞—è–≤–∫–∏"].isin(downtime_types)]
            total_downtime_minutes = downtime_df["–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)"].dropna().sum()
        
        col_total2.metric("–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –ø—Ä–æ—Å—Ç–æ—é (—Ö–≤)", f"{total_downtime_minutes:.1f}" if pd.notna(total_downtime_minutes) else "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
        
        if total_downtime_minutes == 0 and ("–¢–∏–ø –∑–∞—è–≤–∫–∏" not in unique_tasks_df.columns or not unique_tasks_df[unique_tasks_df["–¢–∏–ø –∑–∞—è–≤–∫–∏"].isin(downtime_types)].empty):
            st.info(f"‚ÑπÔ∏è –î–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É '–ó–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É –ø—Ä–æ—Å—Ç–æ—é' –≤—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è –∑–∞—è–≤–∫–∏ –∑ —Ç–∏–ø–æ–º: {', '.join(downtime_types)} —Ç–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è —è–∫ —á–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ç–∞–∫—ñ —Ç–∏–ø–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ —É –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö.")


        st.markdown("---")

        # --- –ê–Ω–∞–ª—ñ–∑ —á–∞—Å—É –Ω–∞ –º–∞—à–∏–Ω—É ---
        st.subheader("‚öôÔ∏è –ê–Ω–∞–ª—ñ–∑ —á–∞—Å—É –Ω–∞ –º–∞—à–∏–Ω—É")

        if "–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è" in filtered_df.columns and not filtered_df["–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è"].empty:
            # –î–ª—è –∞–≥—Ä–µ–≥–∞—Ü—ñ—ó –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é, –¥–µ–Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π DF –ø—ñ–¥—Ö–æ–¥–∏—Ç—å, –æ—Å–∫—ñ–ª—å–∫–∏ –∫–æ–∂–Ω–∞ "–∑–∞—è–≤–∫–∞-—Å–ª—É–∂–±–∞" –ø–∞—Ä–∞ –≤–∞–∂–ª–∏–≤–∞
            
            # 1. –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é
            st.markdown("##### –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é")
            if not filtered_df["–ß–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)"].dropna().empty:
                agg_avg_closure = filtered_df.groupby("–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è")["–ß–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)"].mean().sort_values(ascending=False)
                fig_avg_closure = px.bar(agg_avg_closure, 
                                        x=agg_avg_closure.index, 
                                        y=agg_avg_closure.values,
                                        labels={'x':'–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è', 'y':'–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)'},
                                        title='–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é')
                st.plotly_chart(fig_avg_closure, use_container_width=True)
            else:
                st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–∞—Å—É –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é.")

            # 2. –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é
            st.markdown("##### –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é")
            if not filtered_df["–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)"].dropna().empty:
                agg_total_execution = filtered_df.groupby("–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è")["–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)"].sum().sort_values(ascending=False)
                fig_total_execution = px.bar(agg_total_execution, 
                                            x=agg_total_execution.index, 
                                            y=agg_total_execution.values,
                                            labels={'x':'–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è', 'y':'–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)'},
                                            title='–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é')
                st.plotly_chart(fig_total_execution, use_container_width=True)
            else:
                st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é.")

            # 3. –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –ø—Ä–æ—Å—Ç–æ—é –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é
            st.markdown("##### –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –ø—Ä–æ—Å—Ç–æ—é –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ç–∏–ø—ñ–≤ '–ü—Ä–æ—Å—Ç—ñ–π', '–ü—Ä–æ—Å—Ç—ñ–π –†–¶')")
            if "–¢–∏–ø –∑–∞—è–≤–∫–∏" in filtered_df.columns and "–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)" in filtered_df.columns:
                downtime_types = ["–ü—Ä–æ—Å—Ç—ñ–π", "–ü—Ä–æ—Å—Ç—ñ–π –†–¶"]
                downtime_per_machine_df = filtered_df[filtered_df["–¢–∏–ø –∑–∞—è–≤–∫–∏"].isin(downtime_types)]
                
                if not downtime_per_machine_df.empty:
                    agg_total_downtime = downtime_per_machine_df.groupby("–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è")["–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)"].sum().sort_values(ascending=False)
                    fig_total_downtime = px.bar(agg_total_downtime, 
                                                x=agg_total_downtime.index, 
                                                y=agg_total_downtime.values,
                                                labels={'x':'–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è', 'y':'–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –ø—Ä–æ—Å—Ç–æ—é (—Ö–≤)'},
                                                title='–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –ø—Ä–æ—Å—Ç–æ—é –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é')
                    st.plotly_chart(fig_total_downtime, use_container_width=True)
                else:
                    st.info(f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É –ø—Ä–æ—Å—Ç–æ—é –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é (—Ç–∏–ø(–∏) –∑–∞—è–≤–∫–∏: {', '.join(downtime_types)}).")
            else:
                st.info("–ù–µ–º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö (–∞–±–æ —Å—Ç–æ–≤–ø—Ü—ñ–≤ '–¢–∏–ø –∑–∞—è–≤–∫–∏'/'–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è') –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É –ø—Ä–æ—Å—Ç–æ—é –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é.")

        else:
            st.info("–ù–µ–º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö (–∞–±–æ —Å—Ç–æ–≤–ø—Ü—è '–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è') –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —á–∞—Å—É –Ω–∞ –º–∞—à–∏–Ω—É.")

        st.success("‚úÖ –ê–Ω–∞–ª—ñ–∑ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    except Exception as e:
        st.error(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É: {e}")
        st.info("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à —Ñ–∞–π–ª. –ú–æ–∂–ª–∏–≤–æ, –¥–µ—è–∫—ñ —Å—Ç–æ–≤–ø—Ü—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –¥–∞–Ω—ñ –º–∞—é—Ç—å –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å –≤–∫–∞–∑–∞–Ω—ñ –∫–æ—Ä–µ–∫—Ç–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª —â–µ —Ä–∞–∑.")
elif df is None:
    st.info("‚¨ÜÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV-—Ñ–∞–π–ª, –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å URL, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑.")