import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px # –î–ª—è –∫—Ä–∞—â–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤, —è–∫—ñ –º–æ–∂–Ω–∞ –º–∞—Å—à—Ç–∞–±—É–≤–∞—Ç–∏
from io import StringIO

st.set_page_config(layout="wide", page_title="–ê–Ω–∞–ª—ñ–∑ –∑–∞—è–≤–æ–∫ –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é", page_icon="‚öôÔ∏è")

st.title("‚öôÔ∏è –ê–Ω–∞–ª—ñ–∑ –∑–∞—è–≤–æ–∫ –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é")

st.markdown("""
    –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à **CSV-—Ñ–∞–π–ª** –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –∑–∞—è–≤–∫–∏.
    
    **–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:**
    * **–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ**: –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ "–†–µ–∞–∫—Ü—ñ—é –Ω–∞ –∑–∞—è–≤–∫–∏" —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å.
    * **–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω**: –ü—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ —É –Ω–æ–≤–æ–º—É CSV-—Ñ–∞–π–ª—ñ.
    * **–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö**: –î–æ–¥–∞—Ç–æ–∫ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –¥–∞—Ç, —á–∞—Å—É —Ç–∞ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∏.
    * **–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è**: –§—ñ–ª—å—Ç—Ä–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å –º–Ω–æ–∂–∏–Ω–Ω–∏–π –≤–∏–±—ñ—Ä —Ç–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç.
    * **–í–∏—è–≤–ª–µ–Ω–Ω—è –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω—å**: –î–æ–¥–∞—Ç–æ–∫ –∞–Ω–∞–ª—ñ–∑—É—î –¥–∞–Ω—ñ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω—å —Ç—ñ—î—ó –∂ –ø—Ä–æ–±–ª–µ–º–∏ –Ω–∞ —Ç–æ–º—É –∂ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—ñ –ø—Ä–æ—Ç—è–≥–æ–º 3 –¥–Ω—ñ–≤ —Ç–∞ –ø—ñ–¥—Å–≤—ñ—á—É—î —Ç–∞–∫—ñ –≤–∏–ø–∞–¥–∫–∏.
""")

# --- –í–∏–±—ñ—Ä –¥–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö (—Ç—ñ–ª—å–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ –∫–æ–º–ø'—é—Ç–µ—Ä–∞) ---
st.sidebar.header("–î–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö")

df = None # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ DataFrame —è–∫ None

uploaded_file = st.file_uploader("üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV-—Ñ–∞–π–ª", type=["csv"])
if uploaded_file:
    try:
        uploaded_file.seek(0)
        # –°–ø—Ä–æ–±–∞ —á–∏—Ç–∞–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∞–º–∏ —Ç–∞ –∫–æ–¥—É–≤–∞–Ω–Ω—è–º–∏
        try:
            df = pd.read_csv(uploaded_file, sep=';', encoding='utf-8')
        except Exception:
            uploaded_file.seek(0)
            df = pd.read_csv(uploaded_file, sep=';', encoding='cp1251')
        
        if df.empty or len(df.columns) <= 2: # –Ø–∫—â–æ –∑ ';' –Ω–µ –≤–¥–∞–ª–æ—Å—å –∞–±–æ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–æ –∫–æ–ª–æ–Ω–æ–∫
            uploaded_file.seek(0)
            try:
                df = pd.read_csv(uploaded_file, sep=',', encoding='utf-8')
            except Exception:
                uploaded_file.seek(0)
                df = pd.read_csv(uploaded_file, sep=',', encoding='cp1251')
        
        if df.empty or len(df.columns) <= 2: # –Ø–∫—â–æ –∑ ',' –Ω–µ –≤–¥–∞–ª–æ—Å—å –∞–±–æ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–æ –∫–æ–ª–æ–Ω–æ–∫
            uploaded_file.seek(0)
            try:
                df = pd.read_csv(uploaded_file, encoding='utf-8-sig') # –ó–∞–≥–∞–ª—å–Ω–∏–π –≤–∏–ø–∞–¥–æ–∫ –±–µ–∑ —è–≤–Ω–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∞
            except Exception:
                uploaded_file.seek(0)
                df = pd.read_csv(uploaded_file, encoding='cp1251')

        st.success("‚úÖ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
    except Exception as e:
        st.error(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
        st.info("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —Ñ–∞–π–ª –Ω–µ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π —Ç–∞ —á–∏ —î —É –Ω—å–æ–º—É –¥–∞–Ω—ñ.")
        df = None # –°–∫–∏–¥–∞—î–º–æ df, —â–æ–± –Ω–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É


# --- –í—Å—è –ø–æ–¥–∞–ª—å—à–∞ –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö —Ç–µ–ø–µ—Ä –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ df –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π ---
if df is not None and not df.empty:
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤
        critical_date_time_cols = ["–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è", "–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è"]
        for col in critical_date_time_cols:
            if col not in df.columns:
                st.error(f"‚ùå –£ —Ñ–∞–π–ª—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å: '{col}'. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à —Ñ–∞–π–ª.")
                st.stop()

        # –î–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Å—Ç–æ–≤–ø—Ü—ñ, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
        if "–ó–≤—ñ—Ç –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω—É —Ä–æ–±–æ—Ç—É" not in df.columns:
            df["–ó–≤—ñ—Ç –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω—É —Ä–æ–±–æ—Ç—É"] = ""
            st.info("‚ÑπÔ∏è –°—Ç–æ–≤–ø–µ—Ü—å '–ó–≤—ñ—Ç –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω—É —Ä–æ–±–æ—Ç—É' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É —Ñ–∞–π–ª—ñ —ñ –±—É–≤ –¥–æ–¥–∞–Ω–∏–π —è–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")

        # --- –ù–û–í–ò–ô –°–¢–û–í–ü–ï–¶–¨ "–†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–∞—è–≤–∫–∏" ---
        if "–†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–∞—è–≤–∫–∏" not in df.columns:
            df["–†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–∞—è–≤–∫–∏"] = ""
            st.info("‚ÑπÔ∏è –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å '–†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–∞—è–≤–∫–∏' –¥–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤.")
        
        # –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å "–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä", —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î (–¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –º–µ—Ä–∂—É –∞–Ω–æ–º–∞–ª—ñ–π)
        if "–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä" not in df.columns:
            df["–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä"] = df.index + 1 # –ü—Ä–æ—Å—Ç–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ä—è–¥–∫–∞
            st.info("‚ÑπÔ∏è –°—Ç–æ–≤–ø–µ—Ü—å '–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É —Ñ–∞–π–ª—ñ —ñ –±—É–≤ –¥–æ–¥–∞–Ω–∏–π.")
        
        # –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å "–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è" —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î (–¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ –∞–≥—Ä–µ–≥–∞—Ü—ñ—ó —Ç–∞ –∞–Ω–∞–ª—ñ–∑—ñ –∞–Ω–æ–º–∞–ª—ñ–π)
        if "–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è" not in df.columns:
            df["–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è"] = "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
            st.info("‚ÑπÔ∏è –°—Ç–æ–≤–ø–µ—Ü—å '–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É —Ñ–∞–π–ª—ñ —ñ –±—É–≤ –¥–æ–¥–∞–Ω–∏–π –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'.")
        
        # –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å "–û–ø–∏—Å —Ä–æ–±—ñ—Ç" —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î (–¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∞–Ω–æ–º–∞–ª—ñ–π)
        if "–û–ø–∏—Å —Ä–æ–±—ñ—Ç" not in df.columns:
            df["–û–ø–∏—Å —Ä–æ–±—ñ—Ç"] = "–ë–µ–∑ –æ–ø–∏—Å—É"
            st.info("‚ÑπÔ∏è –°—Ç–æ–≤–ø–µ—Ü—å '–û–ø–∏—Å —Ä–æ–±—ñ—Ç' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É —Ñ–∞–π–ª—ñ —ñ –±—É–≤ –¥–æ–¥–∞–Ω–∏–π –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º '–ë–µ–∑ –æ–ø–∏—Å—É'.")

        # –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏" —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î (–¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó/–≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ)
        if "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏" not in df.columns:
            df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"] = "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
            st.info("‚ÑπÔ∏è –°—Ç–æ–≤–ø–µ—Ü—å '–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É —Ñ–∞–π–ª—ñ —ñ –±—É–≤ –¥–æ–¥–∞–Ω–∏–π –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'.")
        
        # --- –°–ø–∏—Å–æ–∫ –ø–æ—à–∏—Ä–µ–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è ---
        date_formats = [
            "%Y-%m-%d",    # 2025-07-06
            "%d.%m.%Y",    # 06.07.2025
            "%m/%d/%Y",    # 07/06/2025
            "%d/%m/%Y",    # 06/07/2025
            "%Y/%m/%d"     # 2025/07/06
        ]
        time_formats = [
            "%H:%M:%S",    # 12:31:00
            "%H:%M"        # 12:31
        ]
        
        # –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ "–î–∞—Ç–∞ –ß–∞—Å"
        combined_datetime_formats = [
            f"{d_fmt} {t_fmt}" for d_fmt in date_formats for t_fmt in time_formats
        ]
        # –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ —Ç–∞ ISO —Ñ–æ—Ä–º–∞—Ç–∏
        combined_datetime_formats = [
            "%Y-%m-%d %H:%M:%S",
            "%Y-%m-%d %H:%M",
            "%d.%m.%Y %H:%M:%S",
            "%d.%m.%Y %H:%M",
            "%m/%d/%Y %H:%M:%S",
            "%m/%d/%Y %H:%M",
            "%Y-%m-%dT%H:%M:%S", # ISO format (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2025-07-06T12:30:00)
        ] + combined_datetime_formats
        
        # –î–æ–¥–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –¥–∞—Ç–∏ (—è–∫—â–æ —á–∞—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π)
        combined_datetime_formats.extend(date_formats)
        combined_datetime_formats = list(dict.fromkeys(combined_datetime_formats)) # –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏

        def combine_and_convert_datetime(row, date_col_name, time_col_name=None):
            date_val = row.get(date_col_name)
            time_val = row.get(time_col_name) if time_col_name else None

            if pd.isna(date_val) and (time_col_name is None or pd.isna(time_val)):
                return np.nan
            
            # –û–±—Ä–æ–±–∫–∞ —á–∏—Å–ª–æ–≤–∏—Ö –¥–∞—Ç (—è–∫ Excel)
            try:
                if pd.api.types.is_numeric_dtype(type(date_val)) and pd.notna(date_val):
                    # –ë–∞–∑–æ–≤–∞ –¥–∞—Ç–∞ –¥–ª—è Excel (1900-01-01, –∞–ª–µ Excel —Ä–∞—Ö—É—î –∑ 1900-01-01 —è–∫ –¥–µ–Ω—å 1, –∞ 1900-02-29 –±—É–≤ –Ω–µ—ñ—Å–Ω—É—é—á–∏–º –¥–Ω–µ–º)
                    # —Ç–æ–º—É 1899-12-30 —î –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –±–∞–∑–æ—é –¥–ª—è –¥–∞—Ç–∏ 1 = 1900-01-01
                    base_date = pd.to_datetime('1899-12-30')
                    converted_date = base_date + pd.to_timedelta(date_val, unit='D')
                    
                    if pd.notna(converted_date):
                        if time_col_name and pd.api.types.is_numeric_dtype(type(time_val)) and pd.notna(time_val):
                            # –ß–∞—Å –≤ Excel —Ü–µ —á–∞—Å—Ç–∫–∞ –¥–Ω—è (0 –¥–æ 1)
                            converted_time = pd.to_timedelta(time_val, unit='D')
                            return converted_date + converted_time
                        return converted_date
            except Exception:
                pass # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –Ω–∞–º–∞–≥–∞—Ç–∏—Å—è –∑ —Å—Ç—Ä–æ–∫–æ–≤–∏–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
            
            # –û–±—Ä–æ–±–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤–∏—Ö –¥–∞—Ç
            date_str = str(date_val).strip() if pd.notna(date_val) else ""
            time_str = str(time_val).strip() if pd.notna(time_val) else ""

            combined_str = ""
            if date_str and time_str:
                combined_str = f"{date_str} {time_str}"
            elif date_str:
                combined_str = date_str
            elif time_str: # –Ø–∫—â–æ —î –ª–∏—à–µ —á–∞—Å, —ñ –Ω–µ–º–∞—î –¥–∞—Ç–∏, —Ü–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º–æ—é, –∞–ª–µ —Å–ø—Ä–æ–±—É—î–º–æ
                combined_str = time_str
            
            if not combined_str:
                return np.nan

            # –°–ø—Ä–æ–±–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –∑ –≤—ñ–¥–æ–º–∏–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
            for fmt in combined_datetime_formats:
                try:
                    return pd.to_datetime(combined_str, format=fmt)
                except (ValueError, TypeError):
                    continue
            
            # –Ø–∫—â–æ –≤—ñ–¥–æ–º—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∏, —Å–ø—Ä–æ–±—É—î–º–æ infer_datetime_format
            try:
                return pd.to_datetime(combined_str, infer_datetime_format=True, errors='coerce')
            except (ValueError, TypeError):
                return np.nan

        df['–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (datetime)'] = df.apply(lambda row: combine_and_convert_datetime(row, '–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è', '–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'), axis=1)

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤, –¥–µ "–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è" –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ (NaT)
        initial_rows = len(df)
        df.dropna(subset=["–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (datetime)"], inplace=True)
        if len(df) < initial_rows:
            st.warning(f"‚ö†Ô∏è –í–∏–¥–∞–ª–µ–Ω–æ {initial_rows - len(df)} —Ä—è–¥–∫—ñ–≤ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π '–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª. –ú–æ–∂–ª–∏–≤–æ, –¥–µ—è–∫—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª–∏ –æ—á—ñ–∫—É–≤–∞–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç–∞–º.")

        if df.empty:
            st.warning("‚ö†Ô∏è –ü—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ –¥–∞—Ç —É —Ñ–∞–π–ª—ñ –Ω–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—è –¥—ñ–π—Å–Ω–∏—Ö –¥–∞–Ω–∏—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª.")
            st.stop()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é DataFrame –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü—ñ—î—é explode –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∞–Ω–æ–º–∞–ª—ñ–π.
        df_for_anomaly_detection = df.drop_duplicates(subset=['–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä']).copy()

        # --- –ê–ù–ê–õ–Ü–ó –ê–ù–û–ú–ê–õ–Ü–ô (–ü–Ü–î–û–ó–†–Ü–õ–ò–• –ü–û–í–¢–û–†–ï–ù–¨) ---
        if "–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è" in df_for_anomaly_detection.columns and "–û–ø–∏—Å —Ä–æ–±—ñ—Ç" in df_for_anomaly_detection.columns and "–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (datetime)" in df_for_anomaly_detection.columns:
            st.info("üïµÔ∏è –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—à—É–∫ –∞–Ω–æ–º–∞–ª—ñ–π: –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ –Ω–∞ –æ–¥–Ω–æ–º—É –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—ñ/–ª—ñ–Ω—ñ—ó –∑ —Ç–∏–º –∂–µ –æ–ø–∏—Å–æ–º —Ä–æ–±—ñ—Ç –ø—Ä–æ—Ç—è–≥–æ–º 3 –¥–Ω—ñ–≤.")
            
            df_for_anomaly_detection['problem_location'] = df_for_anomaly_detection['–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è'].fillna(df_for_anomaly_detection['–õ—ñ–Ω—ñ—è'].fillna('–ù–µ–≤—ñ–¥–æ–º–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è')).astype(str)
            df_for_anomaly_detection['problem_description'] = df_for_anomaly_detection['–û–ø–∏—Å —Ä–æ–±—ñ—Ç'].fillna('–ë–µ–∑ –æ–ø–∏—Å—É —Ä–æ–±—ñ—Ç').astype(str)
            df_for_anomaly_detection['problem_key'] = df_for_anomaly_detection['problem_location'] + " ### " + df_for_anomaly_detection['problem_description']
            df_for_anomaly_detection = df_for_anomaly_detection.sort_values(by=['problem_key', '–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (datetime)'])
            df_for_anomaly_detection['time_diff'] = df_for_anomaly_detection.groupby('problem_key')['–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (datetime)'].diff()
            
            anomaly_min_delta = pd.Timedelta(days=0, minutes=1)
            anomaly_max_delta = pd.Timedelta(days=3)
            
            df_for_anomaly_detection['–ü—ñ–¥–æ–∑—Ä—ñ–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è'] = (
                (df_for_anomaly_detection['time_diff'] > anomaly_min_delta) & 
                (df_for_anomaly_detection['time_diff'] <= anomaly_max_delta)
            )
            
            anomaly_flags = df_for_anomaly_detection[['–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä', '–ü—ñ–¥–æ–∑—Ä—ñ–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è']].copy()
            anomaly_flags = anomaly_flags.drop_duplicates(subset='–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä', keep='first')
            
            df = df.merge(anomaly_flags, on='–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä', how='left')
            df['–ü—ñ–¥–æ–∑—Ä—ñ–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è'] = df['–ü—ñ–¥–æ–∑—Ä—ñ–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è'].fillna(False)
        else:
            st.warning("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑ –∞–Ω–æ–º–∞–ª—ñ–π: –≤—ñ–¥—Å—É—Ç–Ω—ñ —Å—Ç–æ–≤–ø—Ü—ñ '–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è' (–∞–±–æ '–õ—ñ–Ω—ñ—è'), '–û–ø–∏—Å —Ä–æ–±—ñ—Ç' –∞–±–æ '–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'.")
            df['–ü—ñ–¥–æ–∑—Ä—ñ–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è'] = False

        # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É –¥–∞—Ç –¥–ª—è —ñ–Ω—à–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤
        df['–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (datetime)'] = df.apply(lambda row: combine_and_convert_datetime(row, '–î–∞—Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è', '–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è'), axis=1)
        df['–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è (datetime)'] = df.apply(lambda row: combine_and_convert_datetime(row, '–î–∞—Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è', '–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è'), axis=1)
        df["–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞)"] = df["–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (datetime)"].dt.date
        df["–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)"] = (df["–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (datetime)"] - df["–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (datetime)"]).dt.total_seconds() / 60
        df["–ß–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)"] = (df["–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è (datetime)"] - df["–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (datetime)"]).dt.total_seconds() / 60

        # --- –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è —Ç–∞ "–≤–∏–±—É—Ö" —Å—Ç–æ–≤–ø—Ü—è "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏" ---
        if "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏" in df.columns:
            df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"] = df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"].fillna("")
            df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"] = df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"].apply(
                lambda x: [s.strip() for s in str(x).split(',') if s.strip()] if pd.notna(x) else ["–ù–µ –≤–∫–∞–∑–∞–Ω–æ"]
            )
            df = df.explode("–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏")
            st.info("‚ÑπÔ∏è –°—Ç–æ–≤–ø–µ—Ü—å '–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏' –±—É–ª–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ –¥–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö —Å–ª—É–∂–± –≤ –æ–¥–Ω—ñ–π –∫–æ–º—ñ—Ä—Ü—ñ.")

        # --- –ë–æ–∫–æ–≤–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ ---
        st.sidebar.header("üîç –§—ñ–ª—å—Ç—Ä–∏ –¥–∞–Ω–∏—Ö")
        selected_types = []
        if "–¢–∏–ø –∑–∞—è–≤–∫–∏" in df.columns and not df["–¢–∏–ø –∑–∞—è–≤–∫–∏"].dropna().empty:
            —Ç–∏–ø–∏_–∑–∞—è–≤–æ–∫ = df["–¢–∏–ø –∑–∞—è–≤–∫–∏"].dropna().unique().tolist()
            selected_types = st.sidebar.multiselect("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø(–∏) –∑–∞—è–≤–∫–∏", sorted(—Ç–∏–ø–∏_–∑–∞—è–≤–æ–∫), default=—Ç–∏–ø–∏_–∑–∞—è–≤–æ–∫)
        else:
            st.sidebar.info("–°—Ç–æ–≤–ø–µ—Ü—å '–¢–∏–ø –∑–∞—è–≤–∫–∏' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π. –§—ñ–ª—å—Ç—Ä –≤–∏–º–∫–Ω–µ–Ω–æ.")
        
        selected_workshops = []
        if "–¶–µ—Ö" in df.columns and not df["–¶–µ—Ö"].dropna().empty:
            —Ü–µ—Ö–∏ = df["–¶–µ—Ö"].dropna().unique().tolist()
            selected_workshops = st.sidebar.multiselect("–û–±–µ—Ä—ñ—Ç—å —Ü–µ—Ö(–∏)", sorted(—Ü–µ—Ö–∏), default=—Ü–µ—Ö–∏)
        else:
            st.sidebar.info("–°—Ç–æ–≤–ø–µ—Ü—å '–¶–µ—Ö' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π. –§—ñ–ª—å—Ç—Ä –≤–∏–º–∫–Ω–µ–Ω–æ.")

        selected_responsible_services = []
        if "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏" in df.columns and not df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"].dropna().empty:
            responsible_services = df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"].dropna().unique().tolist()
            if "–ù–µ –≤–∫–∞–∑–∞–Ω–æ" in responsible_services:
                responsible_services.remove("–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
                responsible_services.sort()
                responsible_services.append("–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            else:
                responsible_services.sort()
            
            selected_responsible_services = st.sidebar.multiselect(
                "–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—É(—ñ) —Å–ª—É–∂–±—É(–∏)", 
                responsible_services, 
                default=responsible_services
            )
        else:
            st.sidebar.info("–°—Ç–æ–≤–ø–µ—Ü—å '–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π. –§—ñ–ª—å—Ç—Ä –≤–∏–º–∫–Ω–µ–Ω–æ.")
        
        filter_anomalies = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –ª–∏—à–µ –ø—ñ–¥–æ–∑—Ä—ñ–ª—ñ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è", value=False)
        
        min_date_available = df["–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞)"].min()
        max_date_available = df["–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞)"].max()

        if pd.isna(min_date_available) or pd.isna(max_date_available):
            st.error("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–æ–≤–ø—Ü—ñ '–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è' —Ç–∞ '–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è' —É –≤–∞—à–æ–º—É —Ñ–∞–π–ª—ñ.")
            st.stop()

        start_date = st.sidebar.date_input("–ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞", value=min_date_available, min_value=min_date_available, max_value=max_date_available)
        end_date = st.sidebar.date_input("–ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞", value=max_date_available, min_value=min_date_available, max_value=max_date_available)

        # --- –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ ---
        filtered_df = df.copy()
        if selected_types and "–¢–∏–ø –∑–∞—è–≤–∫–∏" in filtered_df.columns:
            filtered_df = filtered_df[filtered_df["–¢–∏–ø –∑–∞—è–≤–∫–∏"].isin(selected_types)]
        if selected_workshops and "–¶–µ—Ö" in filtered_df.columns:
            filtered_df = filtered_df[filtered_df["–¶–µ—Ö"].isin(selected_workshops)]
        if selected_responsible_services and "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏" in filtered_df.columns:
            filtered_df = filtered_df[filtered_df["–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏"].isin(selected_responsible_services)]
        if filter_anomalies:
            filtered_df = filtered_df[filtered_df['–ü—ñ–¥–æ–∑—Ä—ñ–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è'] == True]
        filtered_df = filtered_df[(filtered_df["–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞)"] >= start_date) & (filtered_df["–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞)"] <= end_date)]

        if filtered_df.empty:
            st.warning("‚ö†Ô∏è –ü—ñ—Å–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.")
            st.stop()
        
        # --- –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ---
        columns_to_display = [
            "–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä", "–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è", "–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è", "–¢–∏–ø –∑–∞—è–≤–∫–∏", "–¶–µ—Ö", 
            "–õ—ñ–Ω—ñ—è", "–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è", "–û–ø–∏—Å —Ä–æ–±—ñ—Ç", "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏", 
            "–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)", "–ß–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)", "–ó–≤—ñ—Ç –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω—É —Ä–æ–±–æ—Ç—É",
            "–†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–∞—è–≤–∫–∏", "–ü—ñ–¥–æ–∑—Ä—ñ–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è"
        ]
        
        # –í–∏–±–∏—Ä–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ, —â–æ —ñ—Å–Ω—É—é—Ç—å —É DataFrame
        filtered_columns_to_display = [col for col in columns_to_display if col in filtered_df.columns]

        # --- –¢–∞–±–ª–∏—Ü—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ---
        st.subheader("üìù –¢–∞–±–ª–∏—Ü—è –∑–∞—è–≤–æ–∫ (—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤)")
        st.markdown("–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —Å–≤–æ—ó –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ —É —Å—Ç–æ–≤–ø–µ—Ü—å '–†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–∞—è–≤–∫–∏'.")
        
        editable_df = st.data_editor(
            filtered_df[filtered_columns_to_display].copy(), # –†–æ–±–∏–º–æ –∫–æ–ø—ñ—é –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
            use_container_width=True, 
            hide_index=True,
            column_config={
                "–†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–∞—è–≤–∫–∏": st.column_config.TextColumn("–†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–∞—è–≤–∫–∏"),
                "–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)": st.column_config.NumberColumn("–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)", format="%.1f"),
                "–ß–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)": st.column_config.NumberColumn("–ß–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)", format="%.1f"),
                "–ü—ñ–¥–æ–∑—Ä—ñ–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è": st.column_config.CheckboxColumn("–ü—ñ–¥–æ–∑—Ä—ñ–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è", disabled=True)
            },
            disabled=[col for col in filtered_columns_to_display if col != "–†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–∞—è–≤–∫–∏"] # –î–æ–∑–≤–æ–ª—è—î–º–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ª–∏—à–µ —Ü–µ–π —Å—Ç–æ–≤–ø–µ—Ü—å
        )

        # --- –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ---
        @st.cache_data
        def convert_df_to_csv(df_to_convert):
            return df_to_convert.to_csv(index=False, sep=';', encoding='utf-8-sig')

        st.download_button(
            label="‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–∏–π CSV",
            data=convert_df_to_csv(editable_df),
            file_name=f'–æ–Ω–æ–≤–ª–µ–Ω—ñ_–∑–∞—è–≤–∫–∏_{pd.Timestamp.now().strftime("%Y-%m-%d")}.csv',
            mime='text/csv',
            help='–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—É —Ç–∞ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω—É —Ç–∞–±–ª–∏—Ü—é —É —Ñ–æ—Ä–º–∞—Ç—ñ CSV'
        )

        st.markdown("---")

        # --- –¢–∞–±–ª–∏—Ü—è –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è–º ---
        st.subheader("üìã –¢–∞–±–ª–∏—Ü—è –∑–∞—è–≤–æ–∫ (–¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è–º)")
        st.markdown("–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ –≤—ñ–∑—É–∞–ª—å–Ω—ñ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è:")
        
        # –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–¥—ñ–ª–µ–Ω–Ω—è
        def highlight_over_15(val):
            return 'background-color: lightcoral' if pd.notna(val) and val > 15 else ''
        
        def highlight_anomaly_row(row):
            is_anomaly = row.get('–ü—ñ–¥–æ–∑—Ä—ñ–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è', False) 
            if is_anomaly:
                return ['background-color: #ffcccc'] * len(row)
            else:
                return [''] * len(row)

        styled_df = editable_df[filtered_columns_to_display].style.apply(
            highlight_anomaly_row, axis=1
        ).applymap(
            highlight_over_15, subset=[col for col in ["–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)", "–ß–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)"] if col in editable_df.columns]
        )
        
        st.dataframe(styled_df, use_container_width=True, height=400)
        
        st.markdown("---")

        # --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–∏–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º) ---
        st.subheader("üìä –ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö")
        col_avg1, col_avg2 = st.columns(2)
        unique_tasks_df = editable_df.drop_duplicates(subset=['–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä'])
        avg_–≤–∏–∫–æ–Ω–∞–Ω–Ω—è = unique_tasks_df['–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)'].dropna().mean()
        avg_–∑–∞–∫—Ä–∏—Ç—Ç—è = unique_tasks_df['–ß–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)'].dropna().mean()
        col_avg1.metric("–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)", f"{avg_–≤–∏–∫–æ–Ω–∞–Ω–Ω—è:.1f}" if pd.notna(avg_–≤–∏–∫–æ–Ω–∞–Ω–Ω—è) else "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
        col_avg2.metric("–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)", f"{avg_–∑–∞–∫—Ä–∏—Ç—Ç—è:.1f}" if pd.notna(avg_–∑–∞–∫—Ä–∏—Ç—Ç—è) else "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
        st.markdown("---")

        st.subheader("üìä –°—É–º–∞—Ä–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ —á–∞—Å—É")
        col_total1, col_total2 = st.columns(2) 
        total_execution_time_minutes = unique_tasks_df["–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)"].dropna().sum() if "–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)" in unique_tasks_df.columns else 0.0
        col_total1.metric("–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)", f"{total_execution_time_minutes:.1f}" if pd.notna(total_execution_time_minutes) else "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
        total_downtime_minutes = 0.0
        downtime_types = ["–ü—Ä–æ—Å—Ç—ñ–π", "–ü—Ä–æ—Å—Ç—ñ–π –†–¶"]
        if "–¢–∏–ø –∑–∞—è–≤–∫–∏" in unique_tasks_df.columns and "–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)" in unique_tasks_df.columns:
            downtime_df = unique_tasks_df[unique_tasks_df["–¢–∏–ø –∑–∞—è–≤–∫–∏"].isin(downtime_types)]
            total_downtime_minutes = downtime_df["–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)"].dropna().sum()
        col_total2.metric("–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –ø—Ä–æ—Å—Ç–æ—é (—Ö–≤)", f"{total_downtime_minutes:.1f}" if pd.notna(total_downtime_minutes) else "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
        st.markdown("---")

        st.subheader("‚öôÔ∏è –ê–Ω–∞–ª—ñ–∑ —á–∞—Å—É –Ω–∞ –º–∞—à–∏–Ω—É")
        if "–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è" in editable_df.columns and not editable_df["–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è"].empty:
            st.markdown("##### –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é")
            if not editable_df["–ß–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)"].dropna().empty:
                agg_avg_closure = unique_tasks_df.groupby("–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è")["–ß–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)"].mean().sort_values(ascending=False)
                fig_avg_closure = px.bar(agg_avg_closure, x=agg_avg_closure.index, y=agg_avg_closure.values, labels={'x':'–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è', 'y':'–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Ö–≤)'}, title='–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é', height=400)
                st.plotly_chart(fig_avg_closure, use_container_width=True)
            else:
                st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–∞—Å—É –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é.")
            st.markdown("##### –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é")
            if not editable_df["–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)"].dropna().empty:
                agg_total_execution = unique_tasks_df.groupby("–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è")["–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)"].sum().sort_values(ascending=False)
                fig_total_execution = px.bar(agg_total_execution, x=agg_total_execution.index, y=agg_total_execution.values, labels={'x':'–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è', 'y':'–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)'}, title='–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é', height=400)
                st.plotly_chart(fig_total_execution, use_container_width=True)
            else:
                st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é.")
            st.markdown("##### –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –ø—Ä–æ—Å—Ç–æ—é –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ç–∏–ø—ñ–≤ '–ü—Ä–æ—Å—Ç—ñ–π', '–ü—Ä–æ—Å—Ç—ñ–π –†–¶')")
            if "–¢–∏–ø –∑–∞—è–≤–∫–∏" in editable_df.columns and "–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)" in editable_df.columns:
                downtime_types = ["–ü—Ä–æ—Å—Ç—ñ–π", "–ü—Ä–æ—Å—Ç—ñ–π –†–¶"]
                downtime_per_machine_df = unique_tasks_df[unique_tasks_df["–¢–∏–ø –∑–∞—è–≤–∫–∏"].isin(downtime_types)]
                if not downtime_per_machine_df.empty:
                    agg_total_downtime = downtime_per_machine_df.groupby("–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è")["–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Ö–≤)"].sum().sort_values(ascending=False)
                    fig_total_downtime = px.bar(agg_total_downtime, x=agg_total_downtime.index, y=agg_total_downtime.values, labels={'x':'–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è', 'y':'–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –ø—Ä–æ—Å—Ç–æ—é (—Ö–≤)'}, title='–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –ø—Ä–æ—Å—Ç–æ—é –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é', height=400)
                    st.plotly_chart(fig_total_downtime, use_container_width=True)
                else:
                    st.info(f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É –ø—Ä–æ—Å—Ç–æ—é –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é (—Ç–∏–ø(–∏) –∑–∞—è–≤–∫–∏: {', '.join(downtime_types)}).")
            else:
                st.info("–ù–µ–º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö (–∞–±–æ —Å—Ç–æ–≤–ø—Ü—ñ–≤ '–¢–∏–ø –∑–∞—è–≤–∫–∏'/'–ß–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è') –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É –ø—Ä–æ—Å—Ç–æ—é –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é.")
        else:
            st.info("–ù–µ–º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö (–∞–±–æ —Å—Ç–æ–≤–ø—Ü—è '–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è') –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —á–∞—Å—É –Ω–∞ –º–∞—à–∏–Ω—É.")
        st.success("‚úÖ –ê–Ω–∞–ª—ñ–∑ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    except Exception as e:
        st.error(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É: {e}")
        st.info(f"–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {type(e).__name__}: {e}")
        st.info("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à —Ñ–∞–π–ª. –ú–æ–∂–ª–∏–≤–æ, –¥–µ—è–∫—ñ —Å—Ç–æ–≤–ø—Ü—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –¥–∞–Ω—ñ –º–∞—é—Ç—å –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å –≤–∫–∞–∑–∞–Ω—ñ –∫–æ—Ä–µ–∫—Ç–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª —â–µ —Ä–∞–∑.")
elif df is None:
    st.info("‚¨ÜÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV-—Ñ–∞–π–ª, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑.")
